name: Build

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.config.name }} (${{ matrix.build_type }})
    runs-on: ${{ matrix.config.os }}

    strategy:
      fail-fast: false
      matrix:
        build_type: ['Debug', 'Release']
        config:
          - { name: 'macOS Clang', os: macos-latest }
          - { name: 'Ubuntu GCC', os: ubuntu-latest }
          - { name: 'Windows MSVC', os: windows-latest }

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: Checkout Test Data
        uses: actions/checkout@v3
        with:
          repository: 'asmaloney/libE57Format-test-data'
          path: libE57Format-test-data

      - name: Install Dependencies (macOS)
        if: matrix.config.os == 'macos-latest'
        run: |
          brew install ninja xerces-c

      - name: Install Dependencies (Ubuntu)
        if: matrix.config.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxerces-c-dev ninja-build
          sudo locale-gen fr_FR

      - name: Cache miniconda (Windows)
        if: matrix.config.os == 'windows-latest'
        uses: actions/cache@v3
        env:
          CACHE_NUMBER: 0 # Increase this value to reset cache if environment.yml has not changed
        with:
          path: ~/conda_pkgs_dir
          key: ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{ hashFiles('.github/conda/environment.yml') }}

      - name: Setup miniconda (Windows)
        if: matrix.config.os == 'windows-latest'
        uses: conda-incubator/setup-miniconda@v2
        with:
          channels: conda-forge
          activate-environment: win-build-env
          environment-file: .github/conda/environment.yml
          use-only-tar-bz2: true # IMPORTANT: Needs to be set for caching to work properly

      - name: Configure MSVC console (Windows)
        if: matrix.config.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Set environment for MSVC (Windows)
        if: matrix.config.os == 'windows-latest'
        run: |
          # Set these env vars so cmake picks the correct compiler
          echo "CXX=cl.exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "CC=cl.exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Configure (Debug)
        if: matrix.build_type == 'Debug'
        run: >
          mkdir libE57Format-build

          cmake
          -B libE57Format-build
          -G "Ninja"
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DE57_MAX_DEBUG=1
          .

      - name: Configure (Release)
        if: matrix.build_type == 'Release'
        run: >
          mkdir libE57Format-build

          cmake
          -B libE57Format-build
          -G "Ninja"
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DE57_DEBUG=0
          .

      - name: Build
        run: cmake --build libE57Format-build

      - name: Test
        run: libE57Format-build/test/testE57
